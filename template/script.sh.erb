#!/usr/bin/env bash

master_node="$(hostname -s)"
master_port="<%= context.cryosparc_master_port %>"
pi_cnetid="<%= context.pi_account %>"
user_cnetid="${USER}"

WORKING_DIR="/beagle3/$pi_cnetid/$user_cnetid/cryosparc_$user_cnetid"
CONFIG_FILE="$WORKING_DIR/master/config.sh"
TMP_CONFIG_FILE="$WORKING_DIR/master/tmp_config.sh"

num_ports=10

# Function to check if a port is in use
is_port_in_use() {
  local host="$1"
  local port="$2"
  timeout 0.1 nc -z "$host" "$port" > /dev/null 2>&1
  return $?
}

start_port=39100

found=0
first_port=0

while [ $found -lt 1 ]
do
  consecutive_free=0
  first_port=$start_port

  for ((i=0; i<$num_ports; i++))
  do
    port_to_check=$((start_port + i))
    if ! is_port_in_use "$node" "$port_to_check"; then
      consecutive_free=$((consecutive_free + 1))
    else
      consecutive_free=0
      start_port=$((port_to_check + 1)) # Move start port after the used one
    fi

    if [ $consecutive_free -eq $num_ports ]; then
      found=1
      break
    fi
  done

  start_port=$((start_port + 1)) # Increment start port if not found
  # Add a safety break to prevent infinite loops (optional, but recommended)
  if [ $start_port -gt 65535 ]; then
    echo "Could not find $num_ports consecutive free ports on $node."
    exit 1
  fi
done

if [ $found -eq 1 ]; then
  echo "$first_port is the master port"
  master_port=$first_port
fi

cp $CONFIG_FILE $TMP_CONFIG_FILE
sed -i "s/CRYOSPARC_MASTER_HOSTNAME=.*/CRYOSPARC_MASTER_HOSTNAME=\"${master_node}.rcc.local\"/" $TMP_CONFIG_FILE
sed -i "s/CRYOSPARC_BASE_PORT=.*/CRYOSPARC_BASE_PORT=${master_port}/"  $TMP_CONFIG_FILE
cp -fav $TMP_CONFIG_FILE $CONFIG_FILE
echo $master_port
echo $master_node

# Clean the environment
module purge
module load rcc/default

# Set working directory to home directory
cd "${WORKING_DIR}"

# Define basic variables
master_cmd=cryosparcm
worker_cmd=cryosparcw

ssd_path="${SLURM_TMPDIR}"

#
# Launch Xfce Window Manager and Panel
#
eval $(dbus-launch --sh-syntax)

export SEND_256_COLORS_TO_REMOTE=1
export XDG_CONFIG_HOME="<%= session.staged_root.join("config") %>"
export XDG_DATA_HOME="<%= session.staged_root.join("share") %>"
export XDG_CACHE_HOME="$(mktemp -d)"
module restore
set -x
export $(dbus-launch)
#   xfwm4 --compositor=off --daemon --sm-client-disable
#   xsetroot -solid "#D3D3D3"
#   xfsettingsd --sm-client-disable
#   xfce4-panel --sm-client-disable

source /etc/os-release
export XDG_RUNTIME_DIR="$TMPDIR/xdg_runtime"

xfwm4 --replace &

parse_slurm_nodes () 
{
	## Parse slurm node list
#	node_list=($(scontrol show hostnames $SLURM_NODELIST))

	master_bindir=$(dirname $(which cryosparcm))
	# worker_bindir=$(dirname $(which cryosparcw)) ##Not defined during account creation

	## This is the first/Master node
	#master_node=${node_list[0]}	
	# master_node="$(hostname)"	

}


start_master () 
{
	
	# remove the old unix sock lock

	if ls /tmp/cryosparc-*sock 1> /dev/null 2>&1; then
		lockfiles=`ls /tmp/cryosparc-*sock`

		if [[ $lockfiles != *"cannot access"* ]];
		then

			for i in $lockfiles
			do
				owner=`stat -c %U $i`
				if [[ $owner == $USER ]]
				then
					echo "  Removing file $i"
					rm $i
					rm /tmp/mongodb*sock
				else
					echo "  There is a $i lockfile left by $owner from a previous session. "
					echo "  CryoSparc cannot obtain the database socket because this file can not be delete by you. "
					echo "  Please ask $owner to delete $i on $master_node ."
					echo "  Unfortunately, I have to quit."
					exit 1
				fi
			done
		fi
	else
		echo "  No lock founded. "
	fi

	echo "  Starting the Cryosparc Master on $master_node. "
	echo $XDG_RUNTIME_DIR
	$master_cmd changeport $master_port -y
	$master_cmd fixdbport
	$master_cmd restart
	sleep 15

	# check if master web is alive
	nc -z -v -w5 $master_node $master_port

	if [[ $? -ne 0 ]];
	then
		echo "  Master web $master_port is not available, exit. "
		exit 1;
	fi

	echo "  Cryosparc Master is started on $master_node:$master_port"

}

cleanup_old_workers () 
{
	current_num_workers=$(cryosparcm cli "get_worker_nodes().__len__()")
	
	echo "  There were $current_num_workers workers connected previously, cleaning"

	worker_list=" "
	
	for (( i=0; i<$current_num_workers; i++))
	do
		old_node=$(cryosparcm cli "get_worker_nodes()[$i][\"name\"]")
		worker_list="$worker_list $old_node"
	done

	echo "  The previous workers are: $worker_list. "

	for w in $worker_list
	do
#		for node in ${node_list[@]}
#		do
			
#			if [[ $w != $node ]]; 
#			then
#				echo "  Removing old node $w from cluster."
#
#				cryosparcm cli "remove_scheduler_target_node(\"$w\")"
#			fi
				cryosparcm cli "remove_scheduler_target_node(\"$w\")"
#		done
	done

}

prepare_ssd_scratch ()
{
	#srun "mkdir -p $ssd_path"
	mkdir -p "$ssd_path"
}

connect_workers ()
{
	echo "  Attempt to connect worker(s) ${node_list[@]} ."

	#for node in ${node_list[@]}
    	#do
	#	if [[ $node != $master_node ]];
	#then
	#		printf "  Connecting worker on %s \n" $node
	
	#		ssh $node "cryosparcw connect --worker $node --master $master_node --port $master_port --ssdpath $ssd_path"
	#		sleep 5
	#	fi
	#done

	# confirm master is also a worker
	cryosparcw connect --worker $master_node --master $master_node --port $master_port --ssdpath $ssd_path

}

remove_workers ()
{
	echo "  Attempt to remove worker(s) ${node_list[@]} ."

	for node in ${node_list[@]}
    	do
		if [[ $node != $master_node ]];
		then
			printf "  Removing worker  %s \n" $node
	
			$master_cmd cli "remove_scheduler_target_node(\"$node\")"
			sleep 5
		fi
	done
}

shutdown_master () 
{	
	echo "  Shutting down Cryosparc Master. "
	cryosparcm stop
}

start_cluster () 
{
	
	parse_slurm_nodes

	start_master

	# cleanup_old_workers

	prepare_ssd_scratch

	# connect_workers

}

cleanup () 
{
	echo "  Job is ending, cleaning up. "

#	remove_workers

	shutdown_master

	echo "  Removing sock lock file. "

	srun rm /tmp/cryosparc*sock
	rm /tmp/cryosparc*sock
	rm /tmp/mongodb*sock

}


set -x
trap 'cleanup' SIGINT SIGQUIT SIGTERM SIGKILL
start_cluster
which firefox
export VGL_DISPLAY=$DISPLAY
xfce4-terminal -e "firefox --kiosk http://localhost:$master_port/ 2>/dev/null" &

while true; do

TIME_LEFT=$(squeue -j $SLURM_JOBID -O timeleft --noheader | awk -F ":" '{print $1 * 60 + $2}')

if [ $TIME_LEFT -lt 180 ]; then
break
fi
sleep 60
done

cleanup

